AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  functionECD3A4E8:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionECD3A4E8
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: functionECD3A4E8
      CodeUri: src/functionECD3A4E8
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - KinesisCrudPolicy:
            StreamName: !Ref streamTheThings
        - KinesisStreamReadPolicy:
            StreamName: !Ref streamTheThings
        - AWSLambdaENIManagementAccess
      Environment:
        Variables:
          STREAM_NAME: !Ref streamTheThings
          STREAM_ARN: !GetAtt streamTheThings.Arn
      Events:
        allTheTopics:
          Type: SNS
          Properties:
            Topic: !Ref allTheTopics
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
  function3A959F50:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function3A959F50
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getTheThings
      CodeUri: src/getTheThings
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${StackeryEnvironmentTagName}/*
        - AWSLambdaENIManagementAccess
      Events:
        GatewayToHell:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref GatewayToHell
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${StackeryEnvironmentTagName}/
          KEY: !Ref EnvConfigparameterKeyAsString
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
    Metadata:
      StackeryName: getTheThings
  putTheThings:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-putTheThings
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: putTheThings
      CodeUri: src/putTheThings
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - AWSLambdaENIManagementAccess
      Events:
        GatewayToHellPUT:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId: !Ref GatewayToHell
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
    Metadata:
      StackeryName: putTheThings
  whyNoName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-whyNoName
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: whyNoName
      CodeUri: src/whyNoName
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        iQueueYou:
          Type: SQS
          Properties:
            Queue: !GetAtt iQueueYou.Arn
            BatchSize: 1
    Metadata:
      StackeryName: whyNoName
  funkyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-funkysoSecure
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: funkyFunction
      CodeUri: src/funkyFunction
      Handler: handler.handler
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref dockerTask
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt dockerTaskExecutionRole.Arn
                - !GetAtt dockerTaskTaskRole.Arn
        - AWSLambdaENIManagementAccess
      Environment:
        Variables:
          DOCKER_TASK_ARN: !Ref dockerTask
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - - !If
                - VirtualNetworkUseExistingResource
                - !GetAtt VirtualNetworkExistingResource.PrivateSubnet1
                - !Ref VirtualRealityPrivateSubnet1
              - !If
                - VirtualNetworkUseExistingResource
                - !GetAtt VirtualNetworkExistingResource.PrivateSubnet2
                - !Ref VirtualRealityPrivateSubnet2
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
    Metadata:
      StackeryName: funkyFunction
  streamTheThings:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-streamTheThings
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
    Metadata:
      StackeryName: streamTheThings
  allTheTopics:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-allTheTopics
    Metadata:
      StackeryName: allTheTopics
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      LambdaConfig:
        PostAuthentication: !GetAtt poolParty.Arn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
  poolParty:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-poolParty
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: poolParty
      CodeUri: src/poolParty
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
    Metadata:
      StackeryName: poolParty
  UserPoolTopoolPartyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt poolParty.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
  soSecure:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-soSecure
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: soSecure
      CodeUri: src/soSecure
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualReality.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
      Events:
        TableOfOwnage:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TableOfOwnage.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
    Metadata:
      StackeryName: soSecure
  VirtualReality:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: VirtualReality
    Metadata:
      StackeryName: VirtualReality
  VirtualRealityPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualRealityPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualRealityPublicSubnet1
  VirtualRealityPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualRealityPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualRealityPrivateSubnet1NatGateway
      RouteTableId: !Ref VirtualRealityPrivateSubnet1RouteTable
  VirtualRealityPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualRealityPrivateSubnet1RouteTable
      SubnetId: !Ref VirtualRealityPrivateSubnet1
  VirtualRealityPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualRealityPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualRealityPublicSubnet2
  VirtualRealityPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualRealityPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualRealityPrivateSubnet2NatGateway
      RouteTableId: !Ref VirtualRealityPrivateSubnet2RouteTable
  VirtualRealityPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualRealityPrivateSubnet2RouteTable
      SubnetId: !Ref VirtualRealityPrivateSubnet2
  VirtualRealityPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VirtualRealityPublicSubnetsInternetGateway
      VpcId: !Ref VirtualReality
  VirtualRealityPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: VirtualReality
  VirtualRealityPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VirtualRealityPublicSubnetsInternetGateway
      RouteTableId: !Ref VirtualRealityPublicSubnetsRouteTable
  VirtualRealityPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: VirtualReality
      VpcId: !Ref VirtualReality
  VirtualRealityPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualRealityPublicSubnetsRouteTable
      SubnetId: !Ref VirtualRealityPublicSubnet1
  VirtualRealityPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualRealityPublicSubnetsRouteTable
      SubnetId: !Ref VirtualRealityPublicSubnet2
  BastardBastion:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      StackeryType: bastion
      StackeryName: BastardBastion
    Properties:
      LaunchConfigurationName: !Ref BastardBastionLaunchConfiguration
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Bastion ${ResourceName} Instance
            - ResourceName: BastardBastion
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref VirtualRealityPublicSubnet1
        - !Ref VirtualRealityPublicSubnet2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
  BastardBastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-BastardBastion
      Policies:
        - PolicyName: BastionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*:log-stream:*
  BastardBastionIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastardBastionIAMRole
  BastardBastionInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Instances Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Bastion ${ResourceName} Instances Security Group
            - ResourceName: BastardBastion
      VpcId: !Ref VirtualReality
  BastardBastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref BastardBastionIAMInstanceProfile
      ImageId: !Ref AmazonLinux2ImageId
      InstanceType: t2.nano
      SecurityGroups:
        - !Ref BastardBastionInstancesSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |-
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Install awslogs, the jq JSON parser, and cfn-signal stuff
            yum install -y awslogs jq

            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /${AWS::StackName}-${ResourceId}/dmesg
            log_stream_name = {instance_id}

            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /${AWS::StackName}-${ResourceId}/messages
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/secure]
            file = /var/log/secure
            log_group_name = /${AWS::StackName}-${ResourceId}/secure
            log_stream_name = {instance_id}

            [/var/log/auth.log]
            file = /var/log/auth.log
            log_group_name = /${AWS::StackName}-${ResourceId}/auth.log
            log_stream_name = {instance_id}

            EOF

            exec 2>>/var/log/cloudwatch-logs-start.log
            set -x

            # Grab the instance id ARN from instance metadata
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            # Replace the instance ID placeholders with the actual values
            sed -i -e "s/{instance_id}/$instance_id/g" /etc/awslogs/awslogs.conf

            service awslogs start
            chkconfig awslogs on

            ########################################################################
            # Create user logins and add their ssh key
            ########################################################################
            echo '${SSHKeys}' > ~ec2-user/users.json
            filename="user.keys"
            jq -r 'to_entries[] | "\(.key) \(.value)"' ~ec2-user/users.json > "$filename"

            while read -r user key
            do
              echo "Adding user: $user"
              useradd -m $user
              homedir=$( getent passwd "$user" | cut -d: -f6 )
              cd $homedir
              mkdir .ssh
              chmod 700 .ssh
              chown $user:$user .ssh
              echo "$key" >> .ssh/authorized_keys
              chmod 600 .ssh/authorized_keys
              chown $user:$user .ssh/authorized_keys

            done < "$filename"

            rm "$filename"
            rm ~ec2-user/users.json

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Set the region to send CloudWatch Logs data to (the region where the instance is located)
            region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            --==BOUNDARY==
          - SSHKeys: '{"<username1>":"<public key>","<username2>":"<public key>"}'
            ResourceId: BastardBastion
  privateApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: privateApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              responses: {}
          /put:
            put:
              responses: {}
          /post:
            post:
              responses: {}
          /delete:
            delete:
              responses: {}
        x-amazon-apigateway-policy:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*
              Condition:
                StringEquals:
                  aws:SourceVpc: !Ref VirtualReality
          Version: 2012-10-17
      EndpointConfiguration: PRIVATE
      TracingEnabled: true
      Cors: '''*'''
    Metadata:
      StackeryName: privateApi
  myCdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-response
              LambdaFunctionARN: !GetAtt livinOnTheEdge.VersionArn
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt BucketOfWin.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${cdn861F67CEOriginAccessIdentity}
    Metadata:
      StackeryName: distributeAllTheThings
  myCdnBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketOfWin
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cdn861F67CEOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt BucketOfWin.Arn
  logTheEroors:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-logTheEroors
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: logTheEroors
      CodeUri: src/logTheEroors
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSSendMessagePolicy:
            QueueName: !GetAtt iQueueYou.QueueName
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt iQueueYou.QueueName
          QUEUE_ARN: !GetAtt iQueueYou.Arn
          QUEUE_URL: !Ref iQueueYou
    Metadata:
      StackeryName: logTheEroors
  myCdnOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  BucketOfWin:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucketofwin
    Metadata:
      StackeryName: essThree
  livinOnTheEdge:
    Type: Custom::StackeryEdgeFunction
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      FunctionName: !Sub ${AWS::StackName}-livinOnTheEdge
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: livinOnTheEdge
      Runtime: nodejs12.x
      CodeUri: src/livinOnTheEdge
      Handler: index.handler
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt livinOnTheEdgeRole.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
    Metadata:
      StackeryName: livinOnTheEdge
  livinOnTheEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-livinOnTheEdge
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  soFancy:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: oohImFancy
      AuthenticationType: API_KEY
      LogConfig:
        FieldLogLevel: ERROR
        CloudWatchLogsRoleArn: !GetAtt soFancyLogsRole.Arn
    Metadata:
      StackeryName: oohImFancy
  soFancySchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt soFancy.ApiId
      DefinitionS3Location: soFancy/schema.graphql
  soFancyTotableDE11F4FEDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt soFancyTotableDE11F4FEAccessRole.Arn
      ApiId: !GetAtt soFancy.ApiId
      Name: TableOfOwnage
      DynamoDBConfig:
        TableName: !Ref TableOfOwnage
        AwsRegion: !Ref AWS::Region
  soFancyTotableDE11F4FEAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-soFanc-to-TableOfOwnage
      Policies:
        - PolicyName: Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt TableOfOwnage.Arn
                  - !Sub ${TableOfOwnage.Arn}/index/*
  soFancyLocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: NONE
      ApiId: !GetAtt soFancy.ApiId
      Name: Local
  soFancyLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-soFancy-logging
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:log-stream:*
  soFancyQuerygetPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Query-getPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Query-getPost-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: getPost
    DependsOn: soFancySchema
  soFancyMutationaddPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Mutation-addPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Mutation-addPost-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: addPost
    DependsOn: soFancySchema
  soFancyPostidResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-id-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-id-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: id
    DependsOn: soFancySchema
  soFancyPostversionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-version-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-version-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: version
    DependsOn: soFancySchema
  soFancyPostauthorResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-author-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-author-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: author
    DependsOn: soFancySchema
  soFancyPostcontentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-content-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-content-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: content
    DependsOn: soFancySchema
  soFancyPostupsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-ups-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-ups-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: ups
    DependsOn: soFancySchema
  soFancyPostdownsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyTotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-downs-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-downs-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: downs
    DependsOn: soFancySchema
  soFancyPosttitleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyLocalDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-title-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-title-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: title
    DependsOn: soFancySchema
  soFancyPosturlResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt soFancyLocalDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-url-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-url-response.vm
      ApiId: !GetAtt soFancy.ApiId
      FieldName: url
    DependsOn: soFancySchema
  TableOfOwnage:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-TableOfOwnage
    Metadata:
      StackeryName: dynamo-iiiiite
  GatewayToHell:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: myApi
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function3A959F50.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putTheThings.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: myApi
  iQueueYou:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-iQueueYou
      KmsMasterKeyId: alias/aws/sqs
    Metadata:
      StackeryName: iNameUQ
  dockerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref dockerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logs
          Name: 0
          Environment:
            - Name: FUNCTION_NAME
              Value: !Ref funkyFunction
            - Name: FUNCTION_ARN
              Value: !GetAtt funkyFunction.Arn
      Cpu: 1024
      ExecutionRoleArn: !GetAtt dockerTaskExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt dockerTaskTaskRole.Arn
      Volumes: []
    DependsOn: dockerTaskLogGroup
    Metadata:
      StackeryName: downWithContainers
      StackeryVirtualNetworkData:
        SubnetIds:
          - !Ref VirtualRealityPrivateSubnet1
          - !Ref VirtualRealityPrivateSubnet2
  dockerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  dockerTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessfunkyFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt funkyFunction.Arn
  dockerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-dockerTask/logs
  AuroraDatabase:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref AuroraDatabaseSubnetGroup
      Engine: aurora-mysql
      EngineMode: serverless
      MasterUsername: !Sub '{{resolve:secretsmanager:${AuroraDatabaseRootUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${AuroraDatabaseRootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 256
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref AuroraDatabaseSecurityGroup
  AuroraDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: AuroraDatabase
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: AuroraDatabase
  AuroraDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: AuroraDatabase
      VpcId: !Ref DefaultVPCId
  AuroraDatabaseRootUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub
        - Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
        - ResourceName: AuroraDatabase
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name: !Sub /${EnvironmentTagName}/${StackTagName}/AuroraDatabase/RootUser
  AuroraDatabaseRootUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraDatabaseRootUserSecret
      TargetId: !Ref AuroraDatabase
      TargetType: AWS::RDS::DBCluster
  FutureApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /:
            get:
              responses: {}
      FailOnWarnings: true
  FutureFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-FutureFunction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: FutureFunction
      CodeUri: src/FutureFunction
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref AuroraDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDatabase}
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref DockerTask
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt DockerTaskExecutionRole.Arn
                - !GetAtt DockerTaskTaskRole.Arn
        - S3CrudPolicy:
            BucketName: !Ref Bucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt Topic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - neptune-db:connect
              Resource: !Sub arn:aws:neptune-db:${AWS::Region}:${AWS::AccountId}:${Graphdb.ClusterResourceId}/*
      Events:
        FutureApiGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref FutureApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.health
      Environment:
        Variables:
          DB_ID: !Ref AuroraDatabase
          DB_ADDRESS: !GetAtt AuroraDatabase.Endpoint.Address
          DB_PORT: !GetAtt AuroraDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref AuroraDatabaseRootUserSecret
          DOCKER_TASK_ARN: !Ref DockerTask
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
          BUCKET_NAME: !Ref Bucket
          BUCKET_ARN: !GetAtt Bucket.Arn
          TOPIC_NAME: !GetAtt Topic.TopicName
          TOPIC_ARN: !Ref Topic
          DB_ADDRESS_2: !GetAtt Graphdb.Endpoint
          DB_ARN_2: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Graphdb}
          DB_ID_2: !GetAtt Graphdb.ClusterResourceId
          DB_PORT_2: !GetAtt Graphdb.Port
      Layers:
        - !Ref Layer
  DockerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DockerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logs
          Name: 0
      Cpu: 1024
      ExecutionRoleArn: !GetAtt DockerTaskExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt DockerTaskTaskRole.Arn
      Volumes: []
    DependsOn: DockerTaskLogGroup
  DockerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-DockerTask/logs
  DockerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-execution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  DockerTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-task
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  Graphdb:
    Type: AWS::Neptune::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref GraphdbSubnetGroup
      IamAuthEnabled: true
      StorageEncrypted: true
      KmsKeyId: alias/aws/rds
      VpcSecurityGroupIds:
        - !Ref GraphdbSecurityGroup
  GraphdbInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref Graphdb
      DBInstanceClass: db.r5.large
      DBSubnetGroupName: !Ref GraphdbSubnetGroup
  GraphdbSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: Graphdb
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: Graphdb
  GraphdbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 8182
        IpProtocol: tcp
        ToPort: 8182
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: Graphdb
      VpcId: !Ref DefaultVPCId
  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Layer ${ResourceName}
        - ResourceName: Layer
      ContentUri: src/Layer
      RetentionPolicy: Retain
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-Topic
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-StateMachine
      DefinitionUri: StateMachine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
      Tracing:
        Enabled: true
      Type: STANDARD
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/stateMachine/${AWS::StackName}-StateMachine
  Website:
    Type: AWS::CodeBuild::Project
    Metadata:
      StackeryType: website
    DependsOn: WebsiteRole
    Properties:
      Name: !Sub ${AWS::StackName}-Website
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt WebsiteRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: latest
                  python: latest
                  ruby: latest
                commands:
                  - |
                    _SOURCE_LOCATION="${SourceLocation}"
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      git clone "${SourceLocation}" repo
                      cd repo
                      git checkout "${SourceVersion}"
                    else
                      aws s3 cp "${SourceLocation}" repo.tgz
                      tar --strip-components 1 -xvvzf repo.tgz
                    fi
                  - cd ${SourceDirectory}
              pre_build:
                commands:
                  - |
                    if [ ! -f yarn.lock -a -f package.json ]; then
                      npm install --production
                    elif [ -f yarn.lock -a -f package.json ]; then
                      yarn install --production
                    elif [ -f requirements.txt ]; then
                      pip install -r requirements.txt
                    elif [ -f Gemfile ]; then
                      bundle install
                    fi
              build:
                commands:
                  - ${BuildCommand}
              post_build:
                commands:
                  - if [ $CODEBUILD_BUILD_SUCCEEDING == 0 ]; then exit 1; fi
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      cd "${!CODEBUILD_SRC_DIR}/repo"
                    else
                      cd "${!CODEBUILD_SRC_DIR}"
                    fi
                  - aws s3 sync '${PublishDirectory}' 's3://${DestinationBucketName}' --acl public-read --cache-control 'max-age=0, must-revalidate, public' --no-progress --delete
          - PublishDirectory: src/site/public
            BuildCommand: npm run build
            SourceDirectory: src/site
      Tags:
        - Key: Stackery Project Type
          Value: Website Builder
  WebsiteEvents:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - FAULT
            - STOPPPED
            - TIMED_OUT
          project-name:
            - !Ref Website
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
          Id: StackeryAgentCommander
  WebsiteEventsPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WebsiteEvents
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WebsiteEvents.Arn
  WebsiteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Website
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Website:log-stream:*
        - PolicyName: DownloadSourceFromStackeryAssetsBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::stackery-assetsbucket-*/*
        - PolicyName: UploadToDestinationObjectStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
  WebsiteBuildTrigger:
    Type: Custom::StackeryWebsiteBuildTrigger
    DependsOn: WebsiteEvents
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: website
      ProjectName: !Ref Website
      SourceVersion: !Ref SourceVersion
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  EnvConfigparameterKeyAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/parameterKey
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  AmazonLinux2ImageId:
    Type: AWS::EC2::Image::Id
    Description: Latest Amazon Linux 2 AMI ID (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  SourceLocation:
    Type: String
    Description: Location of source code for deployment (injected by Stackery at deployment time)
  SourceVersion:
    Type: String
    Description: Source version for deployment (injected by Stackery at deployment time)
Metadata:
  StackeryErrorsTargets:
    function13DB8388: {}
  EnvConfigParameters:
    EnvConfigparameterKeyAsString: parameterKey