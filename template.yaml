AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  api9B06B464:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: myApi
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function3A959F50.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putTheThings.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: myApi
  objectStoreBB958252:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstorebb958252
    Metadata:
      StackeryName: essThree
  function13DB8388:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function13DB8388
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: logTheEroors
      CodeUri: src/logTheEroors
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
    Metadata:
      StackeryName: logTheEroors
  graphql58E2566:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: oohImFancy
      AuthenticationType: API_KEY
      LogConfig:
        FieldLogLevel: ERROR
        CloudWatchLogsRoleArn: !GetAtt graphql58E2566LogsRole.Arn
    Metadata:
      StackeryName: oohImFancy
  graphql58E2566Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt graphql58E2566.ApiId
      DefinitionS3Location: graphql58E2566/schema.graphql
  graphql58E2566LogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-graphql58E2566-logging
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:log-stream:*
  graphql58E2566QuerygetPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Query-getPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Query-getPost-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: getPost
    DependsOn: graphql58E2566Schema
  graphql58E2566MutationaddPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Mutation-addPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Mutation-addPost-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: addPost
    DependsOn: graphql58E2566Schema
  graphql58E2566PostidResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-id-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-id-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: id
    DependsOn: graphql58E2566Schema
  graphql58E2566PostversionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-version-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-version-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: version
    DependsOn: graphql58E2566Schema
  tableDE11F4FE:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-tableDE11F4FE
    Metadata:
      StackeryName: dynamo-iiiiite
  graphql58E2566TotableDE11F4FEDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt graphql58E2566TotableDE11F4FEAccessRole.Arn
      ApiId: !GetAtt graphql58E2566.ApiId
      Name: tableDE11F4FE
      DynamoDBConfig:
        TableName: !Ref tableDE11F4FE
        AwsRegion: !Ref AWS::Region
  graphql58E2566TotableDE11F4FEAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-graphql58E2566-to-tableDE11F4FE
      Policies:
        - PolicyName: Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt tableDE11F4FE.Arn
                  - !Sub ${tableDE11F4FE.Arn}/index/*
  queue29EA3919:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue29EA3919
      KmsMasterKeyId: alias/aws/sqs
    Metadata:
      StackeryName: iNameUQ
  functionECD3A4E8:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionECD3A4E8
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: functionECD3A4E8
      CodeUri: src/functionECD3A4E8
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - KinesisCrudPolicy:
            StreamName: !Ref streamTheThings
        - KinesisStreamReadPolicy:
            StreamName: !Ref streamTheThings
      Environment:
        Variables:
          STREAM_NAME: !Ref streamTheThings
          STREAM_ARN: !GetAtt streamTheThings.Arn
      Events:
        allTheTopics:
          Type: SNS
          Properties:
            Topic: !Ref allTheTopics
  function3A959F50:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function3A959F50
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getTheThings
      CodeUri: src/getTheThings
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${StackeryEnvironmentTagName}/*
      Events:
        api9B06B464:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref api9B06B464
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${StackeryEnvironmentTagName}/
          KEY: !Ref EnvConfigparameterKeyAsString
    Metadata:
      StackeryName: getTheThings
  cdn861F67CE:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-response
              LambdaFunctionARN: !GetAtt edgeFunction9CD55C39.VersionArn
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt objectStoreBB958252.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${cdn861F67CEOriginAccessIdentity}
    Metadata:
      StackeryName: distributeAllTheThings
  cdn861F67CEOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  cdn861F67CEBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref objectStoreBB958252
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cdn861F67CEOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt objectStoreBB958252.Arn
  edgeFunction9CD55C39:
    Type: Custom::StackeryEdgeFunction
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      FunctionName: !Sub ${AWS::StackName}-edgeFunction9CD55C39
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: livinOnTheEdge
      Runtime: nodejs8.10
      CodeUri: src/edgeFunction9CD55C39
      Handler: index.handler
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt edgeFunction9CD55C39Role.Arn
    Metadata:
      StackeryName: livinOnTheEdge
  edgeFunction9CD55C39Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-edgeFunction9CD55C39
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  graphql58E2566PostauthorResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-author-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-author-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: author
    DependsOn: graphql58E2566Schema
  graphql58E2566LocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: NONE
      ApiId: !GetAtt graphql58E2566.ApiId
      Name: Local
  graphql58E2566PosttitleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566LocalDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-title-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-title-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: title
    DependsOn: graphql58E2566Schema
  graphql58E2566PostcontentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-content-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-content-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: content
    DependsOn: graphql58E2566Schema
  graphql58E2566PosturlResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566LocalDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-url-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-url-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: url
    DependsOn: graphql58E2566Schema
  graphql58E2566PostupsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-ups-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-ups-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: ups
    DependsOn: graphql58E2566Schema
  graphql58E2566PostdownsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-downs-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-downs-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: downs
    DependsOn: graphql58E2566Schema
  dockerTask2A5C09C4:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref dockerTask2A5C09C4LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: hello-world
          Name: 0
          Environment:
            - Name: FUNCTION_NAME
              Value: !Ref funkyFunction
            - Name: FUNCTION_ARN
              Value: !GetAtt funkyFunction.Arn
      Cpu: 1024
      ExecutionRoleArn: !GetAtt dockerTask2A5C09C4ExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt dockerTask2A5C09C4TaskRole.Arn
      Volumes: []
    DependsOn: dockerTask2A5C09C4LogGroup
    Metadata:
      StackeryName: downWithContainers
  dockerTask2A5C09C4LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-dockerTask2A5C09C4/hello-world
  dockerTask2A5C09C4ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  dockerTask2A5C09C4TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessfunkyFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt funkyFunction.Arn
  putTheThings:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-putTheThings
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: putTheThings
      CodeUri: src/putTheThings
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        api9B06B464PUT:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId: !Ref api9B06B464
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: putTheThings
  whyNoName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-whyNoName
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: whyNoName
      CodeUri: src/whyNoName
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        queue29EA3919:
          Type: SQS
          Properties:
            Queue: !GetAtt queue29EA3919.Arn
            BatchSize: 1
    Metadata:
      StackeryName: whyNoName
  funkyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-funkyFunction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: funkyFunction
      CodeUri: src/funkyFunction
      Handler: handler.handler
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref dockerTask2A5C09C4
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt dockerTask2A5C09C4ExecutionRole.Arn
                - !GetAtt dockerTask2A5C09C4TaskRole.Arn
      Environment:
        Variables:
          DOCKER_TASK_ARN: !Ref dockerTask2A5C09C4
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
    Metadata:
      StackeryName: funkyFunction
  streamTheThings:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-streamTheThings
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
    Metadata:
      StackeryName: streamTheThings
  allTheTopics:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-allTheTopics
    Metadata:
      StackeryName: allTheTopics
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      LambdaConfig:
        PostAuthentication: !GetAtt poolParty.Arn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
  poolParty:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-poolParty
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: poolParty
      CodeUri: src/poolParty
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
    Metadata:
      StackeryName: poolParty
  UserPoolTopoolPartyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt poolParty.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  EnvConfigparameterKeyAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/parameterKey
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
Metadata:
  StackeryErrorsTargets:
    function13DB8388: {}
  EnvConfigParameters:
    EnvConfigparameterKeyAsString: parameterKey