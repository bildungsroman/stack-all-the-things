AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  functionE833292D:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionE833292D
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getAllTheThings
      CodeUri: src/getAllTheThings
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        api9B06B464:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref api9B06B464
      Environment: {}
    Metadata:
      StackeryName: getAllTheThings
  api9B06B464:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: myApi
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionE833292D.Arn}/invocations
              responses: {}
          /post:
            post:
              responses: {}
          /add:
            put:
              responses: {}
          /delete:
            delete:
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: myApi
  objectStoreBB958252:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstorebb958252
    Metadata:
      StackeryName: essThree
  function13DB8388:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function13DB8388
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: logTheEroors
      CodeUri: src/logTheEroors
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
    Metadata:
      StackeryName: logTheEroors
  graphql58E2566:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: oohImFancy
      AuthenticationType: API_KEY
      LogConfig:
        FieldLogLevel: ERROR
        CloudWatchLogsRoleArn: !GetAtt graphql58E2566LogsRole.Arn
    Metadata:
      StackeryName: oohImFancy
  graphql58E2566Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt graphql58E2566.ApiId
      DefinitionS3Location: graphql58E2566/schema.graphql
  graphql58E2566LogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-graphql58E2566-logging
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:log-stream:*
  graphql58E2566QuerygetPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt graphql58E2566LocalDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Query-getPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Query-getPost-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: getPost
    DependsOn: graphql58E2566Schema
  graphql58E2566MutationaddPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Mutation-addPost-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Mutation-addPost-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: addPost
    DependsOn: graphql58E2566Schema
  graphql58E2566PostidResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-id-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-id-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: id
    DependsOn: graphql58E2566Schema
  graphql58E2566PostversionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Post
      DataSourceName: !GetAtt graphql58E2566TotableDE11F4FEDataSource.Name
      RequestMappingTemplateS3Location: graphql58E2566/Post-version-request.vm
      ResponseMappingTemplateS3Location: graphql58E2566/Post-version-response.vm
      ApiId: !GetAtt graphql58E2566.ApiId
      FieldName: version
    DependsOn: graphql58E2566Schema
  tableDE11F4FE:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-tableDE11F4FE
  graphql58E2566TotableDE11F4FEDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt graphql58E2566TotableDE11F4FEAccessRole.Arn
      ApiId: !GetAtt graphql58E2566.ApiId
      Name: tableDE11F4FE
      DynamoDBConfig:
        TableName: !Ref tableDE11F4FE
        AwsRegion: !Ref AWS::Region
  graphql58E2566TotableDE11F4FEAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-graphql58E2566-to-tableDE11F4FE
      Policies:
        - PolicyName: Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt tableDE11F4FE.Arn
                  - !Sub ${tableDE11F4FE.Arn}/index/*
  cdn9E4E6EFA:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt objectStoreBB958252.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${cdn9E4E6EFAOriginAccessIdentity}
    Metadata:
      StackeryName: distributeItAll
  cdn9E4E6EFAOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  cdn9E4E6EFABucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref objectStoreBB958252
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cdn9E4E6EFAOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt objectStoreBB958252.Arn
  databaseF50FCBBC:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '1'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref databaseF50FCBBCSubnetGroup
      Engine: mysql
      EngineVersion: '5.7'
      MasterUsername: root
      MasterUserPassword: mypassword
      MultiAZ: false
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName}
            - ResourceName: storeAllTheThings
      VPCSecurityGroups:
        - !Ref databaseF50FCBBCSecurityGroup
    Metadata:
      StackeryName: storeAllTheThings
  databaseF50FCBBCSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: databaseF50FCBBC
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: databaseF50FCBBC
  databaseF50FCBBCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: storeAllTheThings
      VpcId: !Ref DefaultVPCId
  queue29EA3919:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue29EA3919
      KmsMasterKeyId: alias/aws/sqs
    Metadata:
      StackeryName: iNameUQ
  topic43B499AD:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-topic43B499AD
  stream61080143:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-stream61080143
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
  functionD4FE0748:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionD4FE0748
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: moarFunctions
      CodeUri: src/moarFunctions
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        timerEB0BC029:
          Type: Schedule
          Properties:
            Schedule: rate(365 days)
          Metadata:
            StackeryName: timesUp
    Metadata:
      StackeryName: moarFunctions
  functionECD3A4E8:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionECD3A4E8
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: functionECD3A4E8
      CodeUri: src/functionECD3A4E8
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - KinesisCrudPolicy:
            StreamName: !Ref stream61080143
        - KinesisStreamReadPolicy:
            StreamName: !Ref stream61080143
      Environment:
        Variables:
          STREAM_NAME: !Ref stream61080143
          STREAM_ARN: !GetAtt stream61080143.Arn
      Events:
        topic43B499AD:
          Type: SNS
          Properties:
            Topic: !Ref topic43B499AD
  functionC6290DFC:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionC6290DFC
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: functionC6290DFC
      CodeUri: src/functionC6290DFC
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        queue29EA3919:
          Type: SQS
          Properties:
            Queue: !GetAtt queue29EA3919.Arn
            BatchSize: 1
  graphql58E2566LocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: NONE
      ApiId: !GetAtt graphql58E2566.ApiId
      Name: Local
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
Metadata:
  StackeryErrorsTargets:
    function13DB8388: {}